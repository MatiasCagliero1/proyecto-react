{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"emit\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useNavigationCache(_ref) {\n  var state = _ref.state,\n      getState = _ref.getState,\n      navigation = _ref.navigation,\n      _setOptions = _ref.setOptions,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      stackRef = _React$useContext.stackRef;\n\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n\n  var actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n          rest = _objectWithoutProperties(navigation, _excluded);\n\n      var _dispatch = function dispatch(thunk) {\n        var action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch(_objectSpread({\n            source: route.key\n          }, action));\n        }\n      };\n\n      var withStack = function withStack(callback) {\n        var isStackSet = false;\n\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return withStack(function () {\n            return _dispatch(actions[name].apply(actions, args));\n          });\n        };\n\n        return acc;\n      }, {});\n      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {\n        dispatch: function dispatch(thunk) {\n          return withStack(function () {\n            return _dispatch(thunk);\n          });\n        },\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return _objectSpread(_objectSpread({}, o), {}, _defineProperty({}, route.key, _objectSpread(_objectSpread({}, o[route.key]), options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"sources":["/Users/mcagliero/Desktop/Proyectos Code/Proyectos_Udesa/proyecto-react/node_modules/@react-navigation/native/node_modules/@react-navigation/core/lib/module/useNavigationCache.js"],"names":["CommonActions","React","NavigationBuilderContext","useNavigationCache","state","getState","navigation","setOptions","router","emitter","useContext","stackRef","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","thunk","action","source","withStack","callback","isStackSet","process","env","NODE_ENV","Error","stack","undefined","helpers","Object","keys","name","args","create","options","o","isFocused","index"],"mappings":"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","sourcesContent":["import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter\n}) {\n  const {\n    stackRef\n  } = React.useContext(NavigationBuilderContext); // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n\n  const cache = React.useMemo(() => ({\n    current: {}\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [getState, navigation, setOptions, router, emitter]);\n  const actions = { ...router.actionCreators,\n    ...CommonActions\n  };\n  cache.current = state.routes.reduce((acc, route) => {\n    const previous = cache.current[route.key];\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        emit,\n        ...rest\n      } = navigation;\n\n      const dispatch = thunk => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({\n            source: route.key,\n            ...action\n          });\n        }\n      };\n\n      const withStack = callback => {\n        let isStackSet = false;\n\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce((acc, name) => {\n        acc[name] = (...args) => withStack(() => // @ts-expect-error: name is a valid key, but TypeScript is dumb\n        dispatch(actions[name](...args)));\n\n        return acc;\n      }, {});\n      acc[route.key] = { ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...emitter.create(route.key),\n        dispatch: thunk => withStack(() => dispatch(thunk)),\n        setOptions: options => setOptions(o => ({ ...o,\n          [route.key]: { ...o[route.key],\n            ...options\n          }\n        })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          } // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      };\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}\n//# sourceMappingURL=useNavigationCache.js.map"]},"metadata":{},"sourceType":"module"}